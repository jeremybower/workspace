name: CI/CD
on:
  pull_request:
  push:
    branches:
      - main
    tags-ignore:
      - "v*-prerelease+*" # excludes v1.2.3-prerelease+3

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    outputs:
      version: ${{ steps.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: "0"

      - name: Prepare environment
        run: |
          echo "DEVTOOLS_USERNAME=$(id -un)" >> $GITHUB_ENV
          echo "DEVTOOLS_UID=$(id -u)" >> $GITHUB_ENV
          echo "DEVTOOLS_GID=$(id -g)" >> $GITHUB_ENV
          echo "DOCKER_COMPOSE_CMD=docker compose -f docker-compose.yml" >> $GITHUB_ENV

      - name: Start containers
        run: |
          make init
          ${{ env.DOCKER_COMPOSE_CMD }} up --detach --wait
          ${{ env.DOCKER_COMPOSE_CMD }} exec --user root devtools /usr/local/sbin/developermod ${{ env.DEVTOOLS_USERNAME }} ${{ env.DEVTOOLS_UID }} ${{ env.DEVTOOLS_GID }} /usr/bin/bash

      - name: Test
        run: |
          ${{ env.DOCKER_COMPOSE_CMD }} exec --user ${{ env.DEVTOOLS_USERNAME }} --workdir /workspace devtools make test

      - name: Calculate prerelease version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        if: github.ref == 'refs/heads/main'
        with:
          tag_prefix: v
          major_pattern: "#major"
          minor_pattern: "#minor"
          version_format: "v${major}.${minor}.${patch}-prerelease+${increment}"
          search_commit_body: true

      - name: Prepare
        id: prepare
        run: |
          # Change the version based on the branch
          if [[ "${{ github.ref}}" == "refs/heads/main" ]]; then
            # Use the prerelease version when building from main
            echo "version=${{ steps.semver.outputs.version }}" >> "$GITHUB_OUTPUT"
            echo "version_with_sha=${{ steps.semver.outputs.version }} (${{ github.sha }})" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            # Use the actual version when building from a tag
            echo "version=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
            echo "version_with_sha=${{ github.ref_name }} (${{ github.sha }})" >> "$GITHUB_OUTPUT"
          else
            echo "version=v0.0.0" >> "$GITHUB_OUTPUT"
            echo "version_with_sha=v0.0.0 (${{ github.sha }})" >> "$GITHUB_OUTPUT"
          fi

      - name: Build binaries for distribution
        env:
          VERSION: ${{ steps.prepare.outputs.version_with_sha }}
        run: |
          ${{ env.DOCKER_COMPOSE_CMD }} exec --user ${{ env.DEVTOOLS_USERNAME }} --workdir /workspace devtools make dist

      - name: Stop containers
        run: |
          ${{ env.DOCKER_COMPOSE_CMD }} down

      - name: Create checksums of the binaries
        run: |
          cd bin
          sha256sum tmpl-* > checksums.sha256
          sha256sum --check checksums.sha256

      - name: Test binaries
        run: |
          test_command() { echo "--------------"; echo "Testing: $1"; eval $1 || exit 1; }
          test_command "bin/tmpl-linux-amd64 --version"
          test_command "bin/tmpl-linux-amd64 --help"
          test_command "bin/tmpl-linux-amd64 generate --help"
          test_command "bin/tmpl-linux-amd64 license"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            bin/tmpl-*
            bin/checksums.sha256
            LICENSE

      - name: Tag commit version
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ steps.prepare.outputs.version }} -m "${{ steps.prepare.outputs.version }}"
          git push origin ${{ steps.prepare.outputs.version }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: "0"

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Setup artifacts
        run: |
          mv artifacts/bin .
          rm -rf artifacts

      - name: Generate Dockerfile
        run: |
          make Dockerfile
          cat Dockerfile

      - name: Check workspace
        run: |
          tree -hp

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker environment
        run: |
          set -x
          docker version
          docker buildx version

      - name: Prepare
        id: prepare
        run: |
          [[ "${{ needs.build.outputs.version }}" =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]
          echo "major_minor_version=${BASH_REMATCH[1]}.${BASH_REMATCH[2]}" >> "$GITHUB_OUTPUT"
          echo "major_minor_patch_version=${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}" >> "$GITHUB_OUTPUT"

      - name: Generate Docker image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=commit-,format=long
            type=raw,value=${{ steps.prepare.outputs.major_minor_version }}
            type=raw,value=${{ steps.prepare.outputs.major_minor_patch_version }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          flavor: |
            latest=false

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Always build the docker image, but only push it for version tags
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Only draft a release for version tags
      - name: Draft a release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: true
          files: |
            bin/tmpl-*
            bin/checksums.sha256
            LICENSE
